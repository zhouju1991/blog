<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>写程序的猫</title>
  
  
  <link href="http://blog.codingcat.net/atom.xml" rel="self"/>
  
  <link href="http://blog.codingcat.net/"/>
  <updated>2021-06-08T12:39:30.757Z</updated>
  <id>http://blog.codingcat.net/</id>
  
  <author>
    <name>CodingCat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建一个单主模式的MGR集群</title>
    <link href="http://blog.codingcat.net/2021/05/10/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E4%B8%BB%E6%A8%A1%E5%BC%8F%E7%9A%84MGR%E9%9B%86%E7%BE%A4/"/>
    <id>http://blog.codingcat.net/2021/05/10/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E4%B8%BB%E6%A8%A1%E5%BC%8F%E7%9A%84MGR%E9%9B%86%E7%BE%A4/</id>
    <published>2021-05-10T10:55:23.000Z</published>
    <updated>2021-06-08T12:39:30.757Z</updated>
    
    <content type="html"><![CDATA[<p>搭建一个单主模式的MGR集群</p><span id="more"></span><!--toc--><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>实验基于MySQL8.0.24版本，操作系统为CentOS7，共三个节点，分别如下：</p><table><thead><tr><th>主机名</th><th>IP</th><th>Port</th><th>Server Id</th></tr></thead><tbody><tr><td>db156</td><td>192.168.165.156</td><td>3306</td><td>1</td></tr><tr><td>db157</td><td>192.168.165.157</td><td>3306</td><td>2</td></tr><tr><td>db225</td><td>192.168.165.225</td><td>3306</td><td>3</td></tr></tbody></table><p>架构如下：</p><p><img src="%E5%8D%95%E8%8A%82%E7%82%B9%E5%8D%95%E4%B8%BB%E7%BB%84%E5%A4%8D%E5%88%B6%E6%9E%B6%E6%9E%84.png" alt="单节点单主组复制架构"></p><h1 id="修改hosts配置"><a href="#修改hosts配置" class="headerlink" title="修改hosts配置"></a>修改hosts配置</h1><p>修改每个服务器的/etc/hosts文件并增加每个服务器的映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.165.156 db156</span><br><span class="line">192.168.165.157 db157</span><br><span class="line">192.168.165.225 db225</span><br></pre></td></tr></table></figure><h1 id="部署MySQL实例"><a href="#部署MySQL实例" class="headerlink" title="部署MySQL实例"></a>部署MySQL实例</h1><p>不做赘述</p><h1 id="第一个节点配置"><a href="#第一个节点配置" class="headerlink" title="第一个节点配置"></a>第一个节点配置</h1><p>修改my.cnf文件并重启MySQL服务</p><p>在mysqld下增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">disabled_storage_engines&#x3D;&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;</span><br><span class="line">server_id &#x3D; 1</span><br><span class="line">gtid_mode&#x3D;ON</span><br><span class="line">enforce_gtid_consistency&#x3D;ON</span><br><span class="line">binlog_checksum&#x3D;NONE</span><br><span class="line">log_bin &#x3D; &#x2F;data&#x2F;mysql&#x2F;logs&#x2F;mysql-bin</span><br><span class="line">log_slave_updates&#x3D;ON</span><br><span class="line">binlog_format&#x3D;ROW</span><br><span class="line">master_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_info_repository&#x3D;TABLE</span><br><span class="line">transaction_write_set_extraction&#x3D;XXHASH64</span><br><span class="line">plugin_load_add&#x3D;&#39;group_replication.so&#39;</span><br><span class="line">group_replication_group_name&#x3D;&quot;1eab024d-afdd-11eb-a2d1-005056a0bb1a&quot;</span><br><span class="line">group_replication_start_on_boot&#x3D;off</span><br><span class="line">group_replication_local_address&#x3D; &quot;192.168.165.156:33061&quot;</span><br><span class="line">group_replication_group_seeds&#x3D; &quot;192.168.165.156:33061,192.168.165.157:33061,192.168.165.225:33061&quot;</span><br><span class="line">group_replication_bootstrap_group&#x3D;off</span><br></pre></td></tr></table></figure><p>重启MySQL服务后执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[root@db156 ~]# mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.24 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SET SQL_LOG_BIN&#x3D;0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER repl@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO repl@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT BACKUP_ADMIN ON *.* TO repl@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET SQL_LOG_BIN&#x3D;1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE REPLICATION SOURCE TO SOURCE_USER&#x3D;&#39;repl&#39;, SOURCE_PASSWORD&#x3D;&#39;123456&#39; FOR CHANNEL &#39;group_replication_recovery&#39;;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET GLOBAL group_replication_bootstrap_group&#x3D;ON;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START GROUP_REPLICATION USER&#x3D;&#39;repl&#39;, PASSWORD&#x3D;&#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (2.24 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET GLOBAL group_replication_bootstrap_group&#x3D;OFF;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM performance_schema.replication_group_members;</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| group_replication_applier | 9b4c6994-afd5-11eb-beab-005056a0bb1a | db156       |        3306 | ONLINE       | PRIMARY     | 8.0.24         |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 创建测试库</span><br><span class="line">mysql&gt; CREATE DATABASE test;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; USE test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO t1 VALUES (1, &#39;Luis&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第二个节点配置"><a href="#第二个节点配置" class="headerlink" title="第二个节点配置"></a>第二个节点配置</h1><p>将第一个节点的配置文件复制到第二个节点并修改server-id和group_replication_local_address即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server_id &#x3D; 2</span><br><span class="line">binlog_format &#x3D; ROW</span><br><span class="line">disabled_storage_engines&#x3D;&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;</span><br><span class="line">gtid_mode&#x3D;ON</span><br><span class="line">enforce_gtid_consistency&#x3D;ON</span><br><span class="line">binlog_checksum&#x3D;NONE</span><br><span class="line">log_slave_updates&#x3D;ON</span><br><span class="line">master_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_info_repository&#x3D;TABLE</span><br><span class="line">transaction_write_set_extraction&#x3D;XXHASH64</span><br><span class="line">plugin_load_add&#x3D;&#39;group_replication.so&#39;</span><br><span class="line">group_replication_group_name&#x3D;&quot;1eab024d-afdd-11eb-a2d1-005056a0bb1a&quot;</span><br><span class="line">group_replication_start_on_boot&#x3D;off</span><br><span class="line">group_replication_local_address&#x3D; &quot;192.168.165.157:33061&quot;</span><br><span class="line">group_replication_group_seeds&#x3D; &quot;192.168.165.156:33061,192.168.165.157:33061,192.168.165.225:33061&quot;</span><br><span class="line">group_replication_bootstrap_group&#x3D;off</span><br></pre></td></tr></table></figure><p>重启后执行如下操作，注意和第一个节点的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@db157 ~]# mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.24 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SET SQL_LOG_BIN&#x3D;0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER repl@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO repl@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT BACKUP_ADMIN ON *.* TO repl@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET SQL_LOG_BIN&#x3D;1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE REPLICATION SOURCE TO SOURCE_USER&#x3D;&#39;repl&#39;, SOURCE_PASSWORD&#x3D;&#39;123456&#39; FOR CHANNEL &#39;group_replication_recovery&#39;;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START GROUP_REPLICATION USER&#x3D;&#39;repl&#39;, PASSWORD&#x3D;&#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (3.11 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM performance_schema.replication_group_members;</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| group_replication_applier | 89999650-afd6-11eb-893e-005056a0d28b | db157       |        3306 | RECOVERING   | SECONDARY   | 8.0.24         |</span><br><span class="line">| group_replication_applier | 9b4c6994-afd5-11eb-beab-005056a0bb1a | db156       |        3306 | ONLINE       | PRIMARY     | 8.0.24         |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM performance_schema.replication_group_members;</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">| group_replication_applier | 89999650-afd6-11eb-893e-005056a0d28b | db157       |        3306 | ONLINE       | SECONDARY   | 8.0.24         |</span><br><span class="line">| group_replication_applier | 9b4c6994-afd5-11eb-beab-005056a0bb1a | db156       |        3306 | ONLINE       | PRIMARY     | 8.0.24         |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><h1 id="第三个节点配置"><a href="#第三个节点配置" class="headerlink" title="第三个节点配置"></a>第三个节点配置</h1><p>与第二个节点相同</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搭建一个单主模式的MGR集群&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
    <category term="组复制" scheme="http://blog.codingcat.net/tags/%E7%BB%84%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL组复制介绍</title>
    <link href="http://blog.codingcat.net/2021/05/07/MySQL%E7%BB%84%E5%A4%8D%E5%88%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.codingcat.net/2021/05/07/MySQL%E7%BB%84%E5%A4%8D%E5%88%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-05-07T15:39:13.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍MySQL组复制相关知识，包括原理及相关的服务。</p><span id="more"></span><!--toc--><h1 id="什么是MySQL组复制"><a href="#什么是MySQL组复制" class="headerlink" title="什么是MySQL组复制"></a>什么是MySQL组复制</h1><p>MySQL Group Replication（MGR）是MySQL 5.7.17引入的服务器插件，可用来创建弹性的、高可用的、容错的复制集群，保证数据库服务持续可用。MGR提供节点之间抢协调性的分布式状态复制，节点间可以自动协调。 MGR可以是单主模式（同一时间只有一个节点接受写操作，且主节点有系统自动选择），多主模式（所有的节点都可接受写操作，即使是同时发送的）两种模式。</p><p>MGR内置的组员服务会保持组内所有节点之间的视图的一致性及可用性供所有节点使用，节点加入或者退出时，视图会相应更新，当某个节点故障时，故障检测机制会检测到并通知组其视图已经发生变更，这些都是自动完成的。</p><p>对于要提交的事务，组内大多数成员需按照全局事务ID的事务顺序达成一致才能提交，提交或者回滚的事务均有每个节点单独完成，但是所有的节点必须做出相同的决定。如果存在网络分区，导致成员无法达成一致，则系统在问题解决前不会继续执行。这是系统内置的自动保护脑裂的机制。</p><p>MGR是基于Group Communication System（GCS）协议的，该协议提供了故障检测机制，组员服务以及安全完整的消息传递服务，这些服务确保了数据在组内复制中的一致性，是创建复制系统的关键，而核心的技术是基于Paxos算法的实现，是组通信的引擎。</p><h1 id="MySQL复制技术"><a href="#MySQL复制技术" class="headerlink" title="MySQL复制技术"></a>MySQL复制技术</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>传统MySQL复制提供的是基于一个源数据库即主节点并复制到一个或多个从节点的复制，主节点应用事务并提交，然后将对数据库的更改发送到从节点上去执行（基于语句的复制）或者是应用（基于行的复制）。默认情况下，所有的节点都包含了一个与主库完全相同的数据，属于shared-nothing的方案。</p><p>如下是MySQL异步复制原理</p><p><img src="%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="异步复制原理"></p><p>如下是MySQL半同步复制原理</p><p><img src="%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="半同步复制原理"></p><p>其中，在各个实例之间的箭头表示实例之间的数据交换以及实例和客户端应用程序之间的数据交换。异步复制和半同步复制的区别在于，半同步复制需要等待至少一个从库复制并应用了中继日志收到回应（有一个等待时间，超过这个时间没有收到回应则退化为异步复制）之后再提交，提高主从数据一致性。而异步复制无需等待从库确认，最大化性能。</p><h2 id="组复制"><a href="#组复制" class="headerlink" title="组复制"></a>组复制</h2><p>组复制是可以用来实现容错系统的技术。复制组是一个服务组，其中的每个服务拥有整个数据的副本，每个服务之间通过消息交流。通信层保证院子消息的传递以及顺序。MGR在此基础上构建并实现了多主更新协议。组内的每个服务独立执行事务，但是每个读写事务均是在组同意后提交，也就是有组来决定是否提交每个读写事务，因此提交操作并非原始服务单方面决定的。读事务不需要组内同意就可以立即提交。</p><p>当读写事务在原始服务上准备提交时，服务会先自动将修改的行以及相应的主键广播。由于事务是按照原子广播的，所有的服务，要么都收到事务要么都没有收到。如果接受到，那都是以同样的顺序接受到并且为这个事务建立起一个全局的顺序。在不同服务上同时执行的事务可能会发生冲突，如两个服务上同时对同一行数据进行修改。解决冲突的方法是顺序在前的事务先提交，顺序在后的事务在原始服务上回滚并从组内其他服务中删除。</p><p><img src="%E7%BB%84%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="组复制原理"></p><p>组复制也是一种shared-nothing的方案，其中每个成员都有自己完整的数据副本。</p><h1 id="组复制应用场景"><a href="#组复制应用场景" class="headerlink" title="组复制应用场景"></a>组复制应用场景</h1><ul><li>弹性复制：服务的数量可以动态添加和减少且尽可能的减少对原服务的影响，如云数据库服务</li><li>高可用分片：分片是写扩展的流行解决方案，使用MGR来实现高可用分片，每个分片映射到一个复制组。</li><li>主从复制替代方案：某些情况下，使用单主服务可能会使其成为连接热点，使用多主会更具扩展性。</li></ul><h1 id="组复制相关服务"><a href="#组复制相关服务" class="headerlink" title="组复制相关服务"></a>组复制相关服务</h1><h2 id="组员服务"><a href="#组员服务" class="headerlink" title="组员服务"></a>组员服务</h2><p>在MGR中，一组服务组成一个复制组。有组名，组时动态的，服务可以在任何时候加入或者离开，组会自动调整。如果有服务加入组，则会从已有的服务中将丢失的状态同步至最新。如果有服务离开，则其余的服务会重新配置组。组员服务定义了哪些服务是在线的并参与到组的，在线的服务列表通常是一个视图。组内的每个服务都有一个一致性视图，说明哪些服务是此刻参与到组复制的成员。组成员不仅仅要统一提交事务，还要统一当前的视图是哪一个如果已有的成员同意新的服务加入称为组的一部分，则组会重新配置，引发视图变更。如果服务离开（自愿与否），组会动态重新配置并引发视图变更。当组员自动离开时，不需要经过大多数成员的同意即可进行重新配置。如果是被动离开如宕机、断网，组复制故障检测机制检测到之后，需要组内成员协商，大部分成员同意之后才能重新配置。</p><h2 id="故障检测服务"><a href="#故障检测服务" class="headerlink" title="故障检测服务"></a>故障检测服务</h2><p>组复制包含了故障检测机制，能够发现并报告那个服务是已经不可用了。当服务A在一段时间内无法接收到服务B的消息并引发超时，会怀疑服务B异常，如果组内其他成员也同意此怀疑，则会将服务B认为是异常的并将该服务排除在组外。当一个服务与所有其他组都无法通信时，会怀疑自己异常，但是因为无法通过协商与组达成一致，因此该怀疑不会产生结果。</p><h2 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h2><p>MGR是建立在Paxos分布式算法的实现上，用来在服务之间进行分布式协商决策，因此需要大多数服务处于活动状态达到法定票数才能做决策。这直接影响了系统中能够出错而不影响整体功能的服务个数，设能够允许出错的服务个数为f，则总服务n=2*f+1. 在实际应用中，允许一个服务故障则需要有3个服务，当一个服务故障时，仍然有两个服务来组成大多数票数并允许系统继续自动决策，但是如果有两个服务故障，则复制组阻塞，一个服务无法组成大多数的票数来做决策。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为MySQL众多高可用集群中的一种，MGR不需要额外的安装其他插件即可提供高可用、可扩展等特性，但是，当故障转移时，应用程序需要修改IP到新的主所在的服务器。MGR从5.7退出以来备受关注，如今发展到8.0版本，功能不断完善，市场上也有部分企业开始使用MGR上生产，这是未来的一个趋势。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍MySQL组复制相关知识，包括原理及相关的服务。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
    <category term="组复制" scheme="http://blog.codingcat.net/tags/%E7%BB%84%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>随笔：《五魁》有感</title>
    <link href="http://blog.codingcat.net/2021/05/06/%E9%9A%8F%E7%AC%94%EF%BC%9A%E3%80%8A%E4%BA%94%E9%AD%81%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://blog.codingcat.net/2021/05/06/%E9%9A%8F%E7%AC%94%EF%BC%9A%E3%80%8A%E4%BA%94%E9%AD%81%E3%80%8B%E6%9C%89%E6%84%9F/</id>
    <published>2021-05-06T17:14:15.000Z</published>
    <updated>2021-06-08T12:39:30.757Z</updated>
    
    <content type="html"><![CDATA[<p>这本小书已经读了很久了，有很多感慨的地方，但是一直没有去写，一直没有，直到今天，这个平常的日子，却也是让我瑟瑟发抖的日子。</p><span id="more"></span><!--今天上，我照常去跟家吉问个好，并把我早上阅读的吴思先生的《潜规则》推荐给她，等来的是她告诉我她结束了短暂的恋情。在我印象中五一前，也就是5天前，她还没有恋爱，这短短的5天竟经历了从恋爱到失恋，她告诉我，对方有很多缺点，但是自己刚下定决心好好在一起，就结束了。我无法想象，对于一个长期处于想恋爱，却不敢，或者说自卑于自己的过去，封锁自我内心的人来说，这是何种打击。家吉告诉我她全身都在发抖。此刻我也在发抖，我也在发抖。--><!--下午五点左右，一个好朋友告诉我他和我的一个好朋友发生了关系，然后之后就再也没有联系过。我发抖了，因为对方是我一直真心用心对待的人，而如今却是这样，或许我也曾喜欢过这个人，或许我也曾幻想过和她在一起的事。然而，现在距离这事过去已经三年了，我才知道。快十年了，我也心想过与她有过什么，但是并没有，而如今却发现她竟与我一好友，而且是因为我他们才认识的，发生了....。 心里久久不能平息，颤颤发抖。--><!--这让我想起了前不久看过的贾凹平先生的《五魁》，何其相似啊，也把这篇迟迟没有落笔的读后感记录下来。--><p>《五魁》里的主人公五魁是个专门给结婚的人驼新娘的，从十五六岁起，做了十多年了。书中讲述了这样一个故事：五魁驼柳家媳妇（一个年轻漂亮，菩萨一样圣洁的女人）路遇山贼，五魁拼命保护着女人，最后也难逃被抢走的命运，五魁想方设法将女人从山寨里救出来，并送回了柳家，五魁也因此在柳家有了分安定的工作。但是女人在柳家过得却不幸福，尝尝被欺负打骂。五魁因将女人夺回在柳家获得一个安定的工作，而女人的丈夫，却因得知女人被抢后取炸药去救人时突然爆炸成了下半身残废的人，女人成了发泄的工具。五魁可以因可以常常看到女人高兴。女人日日夜夜受折磨，知道柳家人发现五魁抱着哭泣的女人，将五魁赶出了柳家。五魁最后将女人带出了柳家，并躲到了深山里，搭建了房子，并一起生活，在五魁眼里，女人是那样的美，幻想着那是他的女人，然而并没有实际的行动。即使女人貌似有些暗示也不为所动的样子。为了怕女人孤独，五魁买了一条狗来陪女人，却不想女人却爱上了那条狗，在阳光明媚的日志里，五魁发现女人光着身子和狗睡在了一起。女人是那么的美丽，五魁是那么的爱她。五魁将狗杀死了，女人也跳下了山崖。最后，五魁成了一个拥有十一位压寨夫人的山贼。</p><p>一个人要经历过多少，才会对这世间的众生百态，无所动摇。要经历过什么，才会放弃哪些原有的坚持，走向他的极端。</p><!--家吉是个温柔可爱的人儿，因为小时候经历了一些事情，父母的离异，以及母亲的尝试自杀等等，对这周围的一切，都害怕着，害怕失去，也害怕得到。正如太宰治《人间失格》所说：胆小鬼连幸福也会害怕。是的，我们害怕幸福，害怕着短暂的时光随时都有可能失去。从此封锁自己，不得到便不会失去，将孤独留给自己，将痛苦留给自己。越是如此，就越渴望。越是渴望，当幸福来临是越是想要抓住。最后还是抓不住，在自己打开心扉去接受这幸福的哪一瞬间，梦幻就破灭了，幸福不在了。这一刻，生的意义是什么？而死貌似也没啥意义！所以如今这不生不死的状态，意义在哪？--><!--从最初的认识，到相谈甚欢的大学时光，以及最后毕业后的各奔东西，到后来你我皆有了各自的家庭。我都保持着最初的幻想，今日却得知，在我婚后第二年，你婚前，与我朋友有了关系，这或许没什么大不了，而于我而言，我多年的幻梦，这一刻却变成了朋友的现实（我知道的这一刻），有些难以接受，难以消化，或许我不该如此，或许我不该对人以真心，也或许我应该更加的主动，更加的强势，那样的话，结局应该会有所不同。往日的时光历历在目，如今却也过眼烟云，让这一切随风，也让我重新拾起曾经的那份自信，努力变成一个强势的人，一个主动的人，拿去自己想要的。--><!--曾今无所不谈的朋友到前两年少有联系，而如今却得知此事。人生多变啊。。。曾今的幻想，到如今，缺失想付诸现实，想摧毁，想想这些失去，以及哪些付出。终有一日，幻想会成为现实，而你我终将如何，且不可知。。。。。。--><!--写于20210506与王家林和杨敏联系，从王家林口中得知，在18年他在大方的时候曾与杨敏发生过关系，为此震惊，想起刚看完不就的《五魁》联系自身，觉得相似，写下此文。。。另附一首：--><!--十年念卿性一朝，一朝醒来梦一场。一场梦境又如何？如何性友却非我？-->]]></content>
    
    
    <summary type="html">&lt;p&gt;这本小书已经读了很久了，有很多感慨的地方，但是一直没有去写，一直没有，直到今天，这个平常的日子，却也是让我瑟瑟发抖的日子。&lt;/p&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="http://blog.codingcat.net/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://blog.codingcat.net/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制原理</title>
    <link href="http://blog.codingcat.net/2021/04/06/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.codingcat.net/2021/04/06/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-06T15:53:34.000Z</published>
    <updated>2021-06-08T12:39:30.749Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要尝试说明MySQL主从复制的原理。</p><span id="more"></span><!--toc--><h2 id="什么是主从复制？"><a href="#什么是主从复制？" class="headerlink" title="什么是主从复制？"></a>什么是主从复制？</h2><p>主从复制指的是数据库在运行过程中，将数据从主库复制到从库的过程，可以从一主复制到一个或多个从库。可以采用异步复制、半同步复制方式。有基于日志点的复制和基于GTID（global transaction id：全局事务ID）的复制两种形式。将数据复制到从库，以达到高可用、高性能的目的。</p><h2 id="为什么要用主从复制？"><a href="#为什么要用主从复制？" class="headerlink" title="为什么要用主从复制？"></a>为什么要用主从复制？</h2><ol><li><p>高可用</p><p>当主库宕机或者主库需要做升级的时候，可以将主库切换到从库上，新的主库对外提供服务，保证服务可用，同时也可以对主库完成运维操作。</p></li><li><p>高性能</p><p>大多数互联网业务读数据操作较多，可以采用多个从库，将读操作由从库进行，每个从库进行不同类型的读操作，而主库只进行写操作，从而提升数据库的整体性能。</p></li><li><p>数据备份</p><p>可以使用从库的方式对数据库进行备份</p></li></ol><h2 id="主从复制有什么优缺点"><a href="#主从复制有什么优缺点" class="headerlink" title="主从复制有什么优缺点"></a>主从复制有什么优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>可扩展：在读压力大的情况下，可以增加多个读节点，将读数据操作分发到不同的节点减轻读压力</li><li>高性能：因为数据分发到不同的节点执行，每个服务器上的压力减小，性能得到提升</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>一致性问题：主要有主从延迟导致的数据不一致和双写导致的数据不一致两种。一致性问题有很多解决方案，如全局唯一ID生成器、双主情况下的间隔ID自增策略</li><li>延时问题：从库监听主库数据变化再复制到从库执行这个过程是需要时间的，因此从库一般和主库之间都会存在延时问题，且随着从库数量的增加，复制压力增加，主从复制的延时也会增加</li></ul><h2 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h2><p>MySQL主从复制的基础是binlog（二进制日志），binlog记录了数据库中数据的变化，只有启用了binlog才能配置主从复制。</p><ol><li>业务端在对主库操作时将会将操作的内容写入到binlog中</li><li>主库为每个从库创建一个log dump线程，读取和发送binlog中的内容</li><li>当从库建立和主库的连接之后，从节点会创建一个IO线程，用来请求主库中更新了的binlog，在接收了主节点中log dump线程发送的更新之后，将更新写入到从节点的relay log（中继日志）中</li><li>在接收到主库的变更之后，从库SQL线程读取relay log中的记录，解析为数据库的操作，并将操作应用到数据库，保证主库和从库的一致性。</li></ol><p><img src="MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="MySQL主从复制原理"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要描述了MySQL数据库主从复制优缺点及原理。MySQL数据库在互联网行业使用广泛，且具有高性能可扩展等特点，在近些年来发展相当迅速。虽然和Oracle RAC实时集群相比，做到双写双活有一定限制，但是对于大多数场景也足够使用了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要尝试说明MySQL主从复制的原理。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何写好一篇技术文章</title>
    <link href="http://blog.codingcat.net/2021/03/27/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    <id>http://blog.codingcat.net/2021/03/27/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/</id>
    <published>2021-03-27T10:36:03.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅一张脑图，由 <a href="https://www.jianshu.com/p/77aeb135e5d1">https://www.jianshu.com/p/77aeb135e5d1</a> 总结而来。</p><span id="more"></span><p><img src="%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0.png" alt="如何写好一篇技术文章"></p><p>详细的内容请移步 <a href="https://www.jianshu.com/p/77aeb135e5d1">https://www.jianshu.com/p/77aeb135e5d1</a> 。</p><p>文中的参考地址 <a href="https://github.com/ruanyf/document-style-guide">https://github.com/ruanyf/document-style-guide</a> 中的内容也不错。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文仅一张脑图，由 &lt;a href=&quot;https://www.jianshu.com/p/77aeb135e5d1&quot;&gt;https://www.jianshu.com/p/77aeb135e5d1&lt;/a&gt; 总结而来。&lt;/p&gt;</summary>
    
    
    
    <category term="技术文章" scheme="http://blog.codingcat.net/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="技术文章" scheme="http://blog.codingcat.net/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL8.0 OCP大纲</title>
    <link href="http://blog.codingcat.net/2021/03/06/MySQL8-0-OCP%E5%A4%A7%E7%BA%B2/"/>
    <id>http://blog.codingcat.net/2021/03/06/MySQL8-0-OCP%E5%A4%A7%E7%BA%B2/</id>
    <published>2021-03-06T11:14:15.000Z</published>
    <updated>2021-06-08T12:39:30.749Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要列举MySQL8.0 OCP考点</p><span id="more"></span><!--toc--><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><ul><li>配置客户端到服务器的连接</li><li>了解MySQL如何存储数据</li><li>了解InnoDB如何存储数据和日志</li><li>配置缓冲区和缓存</li><li>了解和使用数据字典</li></ul><h3 id="服务器安装和配置"><a href="#服务器安装和配置" class="headerlink" title="服务器安装和配置"></a>服务器安装和配置</h3><p>安装和使用MySQL服务器和客户端程序<br>识别在安装过程中创建的文件和文件夹<br>启动和停止MySQL<br>升级MySQL<br>使用选项和选项文件配置MySQL<br>配置MySQL变量<br>在同一主机上启动多个MySQL服务器</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul><li>创建用户帐户和角色</li><li>使用身份验证插件</li><li>控制用户和角色权限</li><li>认识常见的安全风险</li><li>安全的MySQL服务器连接</li><li>提供密码和登录安全性</li><li>保护MySQL主机环境</li><li>防止SQL注入攻击</li><li>加密MySQL资料</li><li>配置MySQL企业防火墙</li></ul><h3 id="监控与维护"><a href="#监控与维护" class="headerlink" title="监控与维护"></a>监控与维护</h3><ul><li>配置和查看MySQL日志文件</li><li>监控MySQL进程和状态</li><li>配置MySQL企业审核</li><li>使用MySQL Enterprise Monitor查看MySQL中的活动</li><li>监控数据库增长并解释容量计划</li><li>解决资源锁定问题</li></ul><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><ul><li>检查MySQL如何优化查询</li><li>使用MySQL Enterprise Monitor分析查询</li><li>创建索引以提高服务器性能</li><li>监视和了解索引统计信息</li></ul><h3 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h3><p>区分不同类型的备份<br>实施备份策略<br>使用MySQL Enterprise Backup备份和还原数据<br>使用mysqldump和mysqlpump执行逻辑备份<br>说明何时以及如何使用原始文件备份<br>备份二进制日志</p><h3 id="高可用性技术"><a href="#高可用性技术" class="headerlink" title="高可用性技术"></a>高可用性技术</h3><p>说明复制如何提供高可用性和可伸缩性<br>配置复制<br>解释二进制日志在复制中的作用<br>配置多源复制<br>解释复制线程的作用<br>监控复制并排除故障<br>描述MySQL InnoDB集群和组复制<br>配置一个MySQL InnoDB集群<br>执行InnoDB集群恢复</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要列举MySQL8.0 OCP考点&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
    <category term="OCP" scheme="http://blog.codingcat.net/tags/OCP/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下如何设置MySQL开机自启</title>
    <link href="http://blog.codingcat.net/2020/12/29/CentOS7%E4%B8%8B%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEMySQL%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    <id>http://blog.codingcat.net/2020/12/29/CentOS7%E4%B8%8B%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEMySQL%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</id>
    <published>2020-12-29T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.741Z</updated>
    
    <content type="html"><![CDATA[<p>一般在部署完MySQL的时候都需要设置开机启动，本文讲解CentOS7下如何配置MySQL开机自启。</p><span id="more"></span><p>CentOS7和6及以前的版本不一样，下面推荐使用systemctl命令来管理服务而不是以前的service(虽然service还能用)，废话不多说，直接看怎么做吧</p><h3 id="创建服务文件"><a href="#创建服务文件" class="headerlink" title="创建服务文件"></a>创建服务文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service</span><br></pre></td></tr></table></figure><p>mysqld是服务的名字，可自定义，不过必须以.service结尾。</p><p>服务文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MySQL Server</span><br><span class="line">Documentation&#x3D;man:mysqld(8)</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mysql</span><br><span class="line">Group&#x3D;mysql</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf</span><br><span class="line">LimitNOFILE &#x3D; 5000</span><br></pre></td></tr></table></figure><p>内容还是通俗易懂的，就不细说啦，需要注意的是ExecStart是启动MySQL的脚本，这里需要使用mysqld文件来启动，而不是使用service命令时的support-files/mysql.server，这里有个好处就是，在多实例又不想使用MySQL官方自带的mysqlmulti的时候，就很方便。</p><h3 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h3><p>创建好服务文件之后，开机自启就简单了，一条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><p>同时还可以使用systemctl命令启停MySQL实例，是不是很方便呀，赶紧试试吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般在部署完MySQL的时候都需要设置开机启动，本文讲解CentOS7下如何配置MySQL开机自启。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入介绍</title>
    <link href="http://blog.codingcat.net/2020/12/05/SQL%E6%B3%A8%E5%85%A5%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A2%84%E9%98%B2/"/>
    <id>http://blog.codingcat.net/2020/12/05/SQL%E6%B3%A8%E5%85%A5%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A2%84%E9%98%B2/</id>
    <published>2020-12-05T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>SQL 注入攻击是通过将恶意的SQL语句如添加、删除等插入到应用的输入参数中，经过后台解析后发送到数据库服务器上解析执行进行的攻击。本文以mysql为例，讨论SQL注入以及在Django中如何防止SQL注入。</p><span id="more"></span><!--toc--><h2 id="SQL注入介绍"><a href="#SQL注入介绍" class="headerlink" title="SQL注入介绍"></a>SQL注入介绍</h2><p>在Web程序中，一般都会有后台根据用户输入内容查找或者执行相关动作的场景，如登录时查询用户是否存在。后台在处理的时候可能是根据用户输入的用户名，拼接SQL之后到数据库查询来判断，这时，如果用户恶意输入不正确内容或内容本身存在问题，会导致应用程序崩溃，甚至是丢失数据等导致相关损失。即通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。这种场景就称为SQL注入。</p><h3 id="一个SQL注入的简单例子"><a href="#一个SQL注入的简单例子" class="headerlink" title="一个SQL注入的简单例子"></a>一个SQL注入的简单例子</h3><p>如执行一条SQL语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">  from tb_user </span><br><span class="line"> where username &#x3D; &#39;jacobzhou&#39;;</span><br></pre></td></tr></table></figure><p>其中jacobzhou是用户输入的值，此时可以得到正确的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * </span><br><span class="line">    -&gt;   from tb_user </span><br><span class="line">    -&gt;  where username &#x3D; &#39;jacobzhou&#39;;</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">| id   | username  | password | age  |</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">|    1 | jacobzhou | 123456   |   29 |</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>但是，当用户输入错误的值，如jacobzhou’;drop table  tb_test;，如果使用的是字符串拼接的方式去执行，SQL语句就变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">  from tb_user </span><br><span class="line"> where username &#x3D; &#39;jacobzhou&#39;;drop table tb_test;&#39;;</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * </span><br><span class="line">    -&gt;   from tb_user </span><br><span class="line">    -&gt;  where username &#x3D; &#39;jacobzhou&#39;;drop table tb_test;&#39;;</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">| id   | username  | password | age  |</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">|    1 | jacobzhou | 123456   |   29 |</span><br><span class="line">+------+-----------+----------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR 1051 (42S02): Unknown table &#39;db-platform.tb_test&#39;</span><br><span class="line">    &#39;&gt; </span><br></pre></td></tr></table></figure><p>以上就是一个SQL注入的例子，可以看到，如果db-platform.tb_test表存在，那就会被恶意删除。例子相对较极端，对于Django自带的connection来说，使用execute函数执行SQL语句的时候，每次只执行一条语句，后一条语句不会执行。因此上面的例子在Django中是不成立的，但是足以说明SQL注入所带来的安全风险。那SQL注入都有哪些方式，如何才能防止SQL注入呢？</p><h2 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h2><p>Web应用程序对于用户输入的数据和合法性没有严谨的判断，前端用户的输入直接传输给后端，攻击者通过构造不同的参数，形成不同的SQL语句来实现对数据库的任意操作。<br>SQL注入产生需要满足两个条件：</p><ul><li>参数用户可控：前端传给后端的参数内容是用户可以控制的</li><li>参数带入数据库查询：传入的参数直接拼接到SQL语句，且带入数据库查询</li></ul><h2 id="SQL注入类型"><a href="#SQL注入类型" class="headerlink" title="SQL注入类型"></a>SQL注入类型</h2><p>SQL注入的分类有很多，如POST注入、Cookie注入、延时注入、搜索注入等，但是归根结底也是数字型和字符型注入的不同展现形式或者是注入的位置不同。</p><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>用户输入为整数，假设SQL语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from home_application_database where id &#x3D; 3; </span><br></pre></td></tr></table></figure><p>其中3为数字，是用户正常输入。</p><p>当满足如下条件，则可能存在数字型注入：</p><ul><li>输入3’ 页面报错（SQL语法错误）</li><li>输入3 and 1 = 1 页面正常返回结果</li><li>输入3 and 1=2 页面返回错误（SQL语句返回空数据）</li></ul><p>如果后台使用的是<code>select * from home_application_database where id = </code>和未经验证的用户输入做拼接后去数据库查询，就满足了上面的三个条件，存在数字型注入。</p><p>这里可以看到用户输入必须是整数，后端验证用户输入必须是整数才会继续执行即可解决。</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>用户输入是字符串，如SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from home_application_database where name &#x3D; &#39;154&#39;</span><br></pre></td></tr></table></figure><p>其中154是字符串，是用户正常输入。</p><p>当满足如下条件时，则可能存在字符型注入：</p><ul><li>输入154’，页面异常（SQL语句语法错误）</li><li>输入154’ and 1 = 1 – ，页面正常返回</li><li>输入154’ and 1 = 2 – ，页面错误（查询结果为空）</li></ul><p>同数字型，如果后台直接使用拼接语句的形式去数据库执行，则就满足了上面单个条件，存在字符型注入。攻击者使用单引号的方式提前结束前一个单引号，并使用and来添加其他操作。</p><h2 id="如何防止SQL注入"><a href="#如何防止SQL注入" class="headerlink" title="如何防止SQL注入"></a>如何防止SQL注入</h2><p>在开发时应该秉持一种<strong>外部参数皆不可信</strong>的原则来进行开发。</p><ul><li><p>加强参数验证</p><p>开发时，验证所有来自前端的输入，必须是符合要求的数据类型，符合指定规则的数据才允许继续往下执行。</p></li><li><p>SQL语句参数化处理</p><p>减少使用或不使用字符串拼接的方式执行SQL，而是将用户输入当着参数传给执行SQL的方法，如Django中的cursor.execute()函数就支持在SQL语句中使用占位符，将输入作为参数传递给方法执行。</p></li><li><p>存储过程</p><p>使用存储过程也可以有效防止SQL注入，不过在存储过程中，需使用占位符，并且使用输入参数来预编译SQL语句后再执行。</p></li></ul><h2 id="Django中防止SQL注入"><a href="#Django中防止SQL注入" class="headerlink" title="Django中防止SQL注入"></a>Django中防止SQL注入</h2><p>Django中使用ORM可以有效防止SQL注入，所以应该尽可能使用ORM。但是ORM对于复杂查询就无能为力了，这时就需要执行原生SQL时，可以使用如下方式：</p><ol><li>使用extra（不建议使用这种方式执行SQL）</li><li>使用raw</li><li>使用django.db执行自定义SQL</li><li>直接使用pymysql</li></ol><p>在使用原生SQL语句时，应避免直接使用用户输入拼接SQL语句，上面三种执行原生SQL的方式均提供了占位符来进行参数替换，防止SQL注入。我们比较常用的是3、和4，两种方法都是使用cursor.execue()方法，具体如下：</p><ul><li><p>django.db</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">result = cursor.fetchall()</span><br></pre></td></tr></table></figure></li><li><p>pymysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection = pymysql.connect(**mysql_server)</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">result = cursor.fetchall()</span><br></pre></td></tr></table></figure><p>execute中的sql语句使用占位符，并传入相应参数即可防止SQL注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sql&#x3D;&quot;select * from home_application_database where id &#x3D; %s&quot; </span><br><span class="line">cursor.execute(sql,3)</span><br><span class="line">1</span><br><span class="line">cursor.execute(sql,&quot;3&#39;&quot;)</span><br><span class="line">1</span><br><span class="line">E:\venv\python2\lib\site-packages\pymysql\cursors.py:297: Warning: Truncated incorrect DOUBLE value: &#39;3&#39;&#39;</span><br><span class="line">  self._do_get_result()</span><br><span class="line">cursor.execute(sql,&quot;3 and 1 &#x3D; 1 &quot;)</span><br><span class="line">E:\venv\python2\lib\site-packages\pymysql\cursors.py:297: Warning: Truncated incorrect DOUBLE value: &#39;3 and 1 &#x3D; 1 &#39;</span><br><span class="line">1</span><br><span class="line">  self._do_get_result()</span><br><span class="line">cursor.execute(sql,&quot;3 and 1 &#x3D; 2 &quot;)</span><br><span class="line">E:\venv\python2\lib\site-packages\pymysql\cursors.py:297: Warning: Truncated incorrect DOUBLE value: &#39;3 and 1 &#x3D; 2 &#39;</span><br><span class="line">  self._do_get_result()</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>从上面执行结果看出，对于整数型注入，使用execute中带参数执行的方式，并不满足注入条件，当使用3’，3 and 1 = 1 ，3 and 1 = 2 作为输入传给execute执行时，程序报错。</p><p>同理对于字符型注入也一样。</p><blockquote><p>注意：在使用execute函数执行时，SQL语句中的占位符，不管是字符还是整型，都使用%s，且对于字符型的数据，在SQL语句里面不能使用’%s’，否则会报错。使用参数替换本质上是对输入的参数进行转义处理，防止输入中的引号。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQL 注入攻击是通过将恶意的SQL语句如添加、删除等插入到应用的输入参数中，经过后台解析后发送到数据库服务器上解析执行进行的攻击。本文以mysql为例，讨论SQL注入以及在Django中如何防止SQL注入。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
    <category term="SQL注入" scheme="http://blog.codingcat.net/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL忘记root密码怎么办</title>
    <link href="http://blog.codingcat.net/2020/10/23/MySQL%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <id>http://blog.codingcat.net/2020/10/23/MySQL%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/</id>
    <published>2020-10-23T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>使用MySQL过程中我们偶尔会遇到忘记密码的情况，怎么办呢？能不能吧密码找回来或者重新设置密码呢？</p><span id="more"></span><p>MySQL忘记root密码之后，可以重新设置一个新的密码，怎么做呢？</p><ol><li><p>修改配置文件my.cnf，在[mysqld]下面增加参数：skip-grant-tables（启动 MySQL 服务的时候跳过权限表认证。启动后，连接到 MySQL 的 root 将不需要口令。），重启MySQL服务，免密码登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ocp11g~]# vi &#x2F;etc&#x2F;my.cnf    </span><br><span class="line">[root@ocp11g~]# service mysql restart</span><br><span class="line">Shuttingdown MySQL.... SUCCESS!</span><br><span class="line">StartingMySQL.. SUCCESS!</span><br><span class="line">[root@ocp11g~]# mysql -uroot</span><br><span class="line">Welcometo the MySQL monitor. Commands end with; or \g.</span><br><span class="line">YourMySQL connection id is 2</span><br><span class="line">Serverversion: 5.7.26-log MySQL Community Server (GPL)</span><br><span class="line">Copyright(c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line">Oracleis a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates.Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type&#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改root用户密码为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;alter user root@localhost identified by &#39;123456&#39;;</span><br><span class="line">ERROR1290 (HY000): The MySQL server is running with the --skip-grant-tables optionso it cannot execute this statement</span><br><span class="line">mysql&gt;update user set authentication_string &#x3D; NULL where user &#x3D; &#39;root&#39;;</span><br><span class="line">ERROR1046 (3D000): No database selected</span><br><span class="line">mysql&gt;use mysql</span><br><span class="line">Readingtable information for completion of table and column names</span><br><span class="line">Youcan turn off this feature to get a quicker startup with -A</span><br><span class="line">Databasechanged</span><br><span class="line">mysql&gt;update user set authentication_string &#x3D; NULL where user &#x3D; &#39;root&#39;;</span><br><span class="line">QueryOK, 1 row affected (0.01 sec)</span><br><span class="line">Rowsmatched: 1 Changed: 1 Warnings: 0</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>修该配置文件删除skip-grant-tables参数，重启MySQL服务，使用空密码登录，修改root密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@ocp11g~]# vi &#x2F;etc&#x2F;my.cnf    </span><br><span class="line">[root@ocp11g~]# service mysql restart</span><br><span class="line">Shuttingdown MySQL.. SUCCESS!</span><br><span class="line">StartingMySQL. SUCCESS!</span><br><span class="line">[root@ocp11g~]# mysql -uroot</span><br><span class="line">Welcometo the MySQL monitor. Commands end with; or \g.</span><br><span class="line">YourMySQL connection id is 3</span><br><span class="line">Serverversion: 5.7.26-log MySQL Community Server (GPL)</span><br><span class="line">Copyright(c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line">Oracleis a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates.Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type&#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line">mysql&gt;alter user root@localhost identified by &#39;123456&#39;;</span><br><span class="line">QueryOK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>密码修改完成，MySQL root密码已修改，MySQL正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ocp11g~]# mysql -uroot</span><br><span class="line">ERROR1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</span><br><span class="line">[root@ocp11g~]# mysql -uroot -p</span><br><span class="line">Enterpassword:</span><br><span class="line">Welcometo the MySQL monitor. Commands end with; or \g.</span><br><span class="line">YourMySQL connection id is 5</span><br><span class="line">Serverversion: 5.7.26-log MySQL Community Server (GPL)</span><br><span class="line">Copyright(c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line">Oracleis a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates.Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type&#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line">mysql&gt;exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用MySQL过程中我们偶尔会遇到忘记密码的情况，怎么办呢？能不能吧密码找回来或者重新设置密码呢？&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库关闭的情况下如何修改参数</title>
    <link href="http://blog.codingcat.net/2020/10/20/Oracle%E5%85%B3%E9%97%AD%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8F%82%E6%95%B0/"/>
    <id>http://blog.codingcat.net/2020/10/20/Oracle%E5%85%B3%E9%97%AD%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8F%82%E6%95%B0/</id>
    <published>2020-10-20T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候由于误操作，修改了某些参数后，重启数据库发现无法启动，需要将参数修改回来或者其他操作后才能正常启动，但是在数据库关闭的情况下，无法使用alter system等命令来修改参数，到底需要怎么做呢？</p><span id="more"></span><!--toc--><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在Oracle中很多参数在修改的时候都有一定的规定，如在设置快速恢复区时，db_recovery_file_dest和db_recovery_file_dest_size需修改后重启数据库，如果只修改了db_recovery_file_dest，db_recovery_file_dest_size并不设定值，则无法重启数据库，启动时报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; startup </span><br><span class="line">ORA-19802: cannot use DB_RECOVERY_FILE_DEST without DB_RECOVERY_FILE_DEST_SIZE</span><br></pre></td></tr></table></figure><p>由于数据库已关闭，这时候也无法修改参数db_recovery_file_dest_size：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; alter system set db_recovery_file_dest_size&#x3D;4G scope&#x3D;spfile;</span><br><span class="line">alter system set db_recovery_file_dest_size&#x3D;4G scope&#x3D;spfile</span><br><span class="line">*</span><br><span class="line">ERROR at line 1:</span><br><span class="line">ORA-01034: ORACLE not available</span><br><span class="line">Process ID: 0</span><br><span class="line">Session ID: 0 Serial number: 0</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>遇到上面类似修改参数之后无法启动数据库的情况，可以通过修改参数文件来解决。在Oracle中，有spfile和pfile两种参数文件，spfile是不可编辑的，正常情况下数据库使用的是spfile，pfile可以编辑，Oracle中可以通过spfile和pfile来相互创建，因此可以通过这个方法来解决此问题。</p><p>首先，使用已有的pfile来启动数据库，如果没有，可以根据其他数据库的内容来手动创建：startup pfile=’’</p><p>启动后，使用create pfile=’新的pfile文件’ from spfile=’原来的spfile文件’，此时的数据库状态不一定非得OPEN。</p><p>然后修改新建的pfile文件，确保参数都正确修改，如上面的例子，删除db_recovery_file_dest所在的行</p><p>关闭数据库并使用新的pfile文件启动数据库：startup pfile=’新的pfile’;</p><p>创建spfile文件：create spfile=’spfile文件’ from pfile=’新的pfile文件’;</p><p>关闭数据库，正常启动：startup</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; show parameter db_recovery            </span><br><span class="line"></span><br><span class="line">NAME                                 TYPE        VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">db_recovery_file_dest                string</span><br><span class="line">db_recovery_file_dest_size           big integer 0</span><br><span class="line">SQL&gt; alter system set db_recovery_file_dest&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;fast_recovery_area&#39; scope&#x3D;spfile;</span><br><span class="line"></span><br><span class="line">System altered.</span><br><span class="line">SQL&gt; shutdown immediate</span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE instance shut down.</span><br><span class="line">SQL&gt; startup </span><br><span class="line">ORA-19802: cannot use DB_RECOVERY_FILE_DEST without DB_RECOVERY_FILE_DEST_SIZE</span><br><span class="line">SQL&gt; alter system set db_recovery_file_dest_size&#x3D;4G scope&#x3D;spfile;</span><br><span class="line">alter system set db_recovery_file_dest_size&#x3D;4G scope&#x3D;spfile</span><br><span class="line">*</span><br><span class="line">ERROR at line 1:</span><br><span class="line">ORA-01034: ORACLE not available</span><br><span class="line">Process ID: 0</span><br><span class="line">Session ID: 0 Serial number: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; startup pfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;init.ora&#39;</span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1073737800 bytes</span><br><span class="line">Fixed Size                  8904776 bytes</span><br><span class="line">Variable Size             616562688 bytes</span><br><span class="line">Database Buffers          440401920 bytes</span><br><span class="line">Redo Buffers                7868416 bytes</span><br><span class="line">ORA-00205: error in identifying control file, check alert log for more info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; select status from v$instance;</span><br><span class="line"></span><br><span class="line">STATUS</span><br><span class="line">------------</span><br><span class="line">STARTED</span><br><span class="line"></span><br><span class="line">SQL&gt; create pfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;init-20201020.ora&#39; from spfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;spfileorcl.ora&#39;;</span><br><span class="line"></span><br><span class="line">File created.</span><br><span class="line"></span><br><span class="line">SQL&gt; shutdown immediate </span><br><span class="line">ORA-01507: database not mounted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ORACLE instance shut down.</span><br><span class="line">SQL&gt; </span><br></pre></td></tr></table></figure><p>修改文件/u01/app/oracle/product/19.3.0/db_1/dbs/init-20201020.ora，删除db_recovery_file_dest所在的行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; startup pfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;init-20201020.ora&#39;</span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1593832624 bytes</span><br><span class="line">Fixed Size                  9135280 bytes</span><br><span class="line">Variable Size             973078528 bytes</span><br><span class="line">Database Buffers          603979776 bytes</span><br><span class="line">Redo Buffers                7639040 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br><span class="line"></span><br><span class="line">SQL&gt; create spfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;spfileorcl.ora&#39; from pfile&#x3D;&#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;db_1&#x2F;dbs&#x2F;init-20201020.ora&#39;;</span><br><span class="line"></span><br><span class="line">File created.</span><br><span class="line"></span><br><span class="line">SQL&gt; </span><br><span class="line">SQL&gt; shutdown immediate </span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE instance shut down.</span><br><span class="line">SQL&gt; startup </span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1593832624 bytes</span><br><span class="line">Fixed Size                  9135280 bytes</span><br><span class="line">Variable Size             973078528 bytes</span><br><span class="line">Database Buffers          603979776 bytes</span><br><span class="line">Redo Buffers                7639040 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多时候由于误操作，修改了某些参数后，重启数据库发现无法启动，需要将参数修改回来或者其他操作后才能正常启动，但是在数据库关闭的情况下，无法使用alter system等命令来修改参数，到底需要怎么做呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Oracle" scheme="http://blog.codingcat.net/categories/Oracle/"/>
    
    
    <category term="Oracle" scheme="http://blog.codingcat.net/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引介绍</title>
    <link href="http://blog.codingcat.net/2020/10/09/MySQL%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.codingcat.net/2020/10/09/MySQL%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-10-09T15:14:32.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，数据库做了两件事情：存储数据和检索数据。检索数据是数据库中使用最多的一个功能。本篇文主要讨论MySQL数据库中InnoDB存储引擎下的索引的原理和使用。本文主要从以下几个方面展开：</p><img src="/2020/10/09/MySQL%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2.png" class="" title="文章大纲"><span id="more"></span><!--toc--><h2 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h2><p>MySQL官方对索引的解释是这样的，原文如下：</p><p>Indexes are used to find rows with specific column values quickly. Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs. If the table has an index for the columns in question, MySQL can quickly determine the position to seek to in the middle of the data file without having to look at all the data. This is much faster than reading every row sequentially.</p><p>翻译如下：</p><p>索引是用来快速查找特定列为具体的值的行的。没有索引，MySQL必须从头到尾扫描整张表来找打相关的行。表越大，消耗越大。如果查询列上有索引，MySQL能够快速的确定要查找数据所在数据文件的具体位置而不用扫描所有数据，这比按顺序读取每一行数据快很多。</p><p>简单的来说，索引就像书本的目录，通过目录可以快速的确定要查找内容的具体位置。通过索引，加快查询速度，降低查询消耗。</p><p>MySQL中的索引是存储引擎实现的，每种存储引擎使用的索引不同。以下只讨论InnoDB中的索引。</p><h2 id="InnoDB索引原理"><a href="#InnoDB索引原理" class="headerlink" title="InnoDB索引原理"></a>InnoDB索引原理</h2><p>InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+树中的。每一个索引在 InnoDB 里面对应一棵 B+ 树。数据存储在叶子节点上。详细结构如下：</p><p><img src="B+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.jpg" alt="B+树索引结构"></p><h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><p>索引可以有很多类型，如聚簇索引、非聚簇索引、唯一索引、复合索引、全文索引、空间索引等，在此只讨论聚簇索引和非聚簇索引。</p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>在InnoDB表中，数据是按照主键索引的顺序来组织的，这种表称为索引组织表，而主键索引称为聚簇索引。创建表后，如果表上有主键，则聚簇索引就是主键索引，否则使用非空唯一索引来创建聚簇索引，没有主键也没有非空唯一索引，InnoDB会创建一个隐藏的自增ID来作为聚簇索引的字段。一张表只能有一个聚簇索引。</p><p>聚簇索引的非叶子节点存放每一个键的值，叶子节点存放每一行的数据。</p><h3 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h3><p>除了聚簇索引之外的索引都可以称为辅助索引，辅助索引和聚簇索引的区别在于，辅助索引的叶子节点存储的是主键的键值，一张表可以有多个辅助索引。使用辅助索引来查找数据时，一般需要经过两个过程：一是通过辅助索引查找到对应的主键值，二是通过主键值去查找到需要的数据，这个过程称为回表。当创建的索引上包含多个字段，覆盖了要查找的字段时，查询不需要回表就可以查询到需要的数据，这种索引称为覆盖索引。</p><h2 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>提高数据检索的效率,降低数据库的IO成本</p><p>在数据库查询的过程中，本质上是尽量减少查找的数据量，降低磁盘IO来提高查询的效率。</p></li><li><p>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p><p>当对数据进行排序时，如果排序字段没有索引，将消耗大量的CPU来进行排序操作。数据库较大的情况下甚至会使用磁盘来进行排序，查询效率低下。</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>索引会占用磁盘空间</p><p>索引也是一张表，表中保存了主键和索引字段，</p></li><li><p>降低更新效率</p><p>在对表做更新操作的时候，MySQL不仅要保存数据，还需要保存索引，每次更新有索引的字段，都会因为更新的键值改变索引的信息。</p></li></ul><h2 id="如何利用索引来优化查询"><a href="#如何利用索引来优化查询" class="headerlink" title="如何利用索引来优化查询"></a>如何利用索引来优化查询</h2><p>既然索引可以提高查询效率，那是否在所有列上都建立索引就可以了？答案是不一定。并不是所有的索引都能够提高查询效率。那如何建立合适的索引来提高查询效率？</p><p>索引的建立需要符合以下原则：</p><ul><li>查询频次较高，且数据量较大的表</li><li>尽量使用唯一索引</li><li>选择区分度较高的列建立索引</li><li>对于建立索引的表，更新不应频繁</li><li>选择索引列时应选择where条件或者on子句中使用的字段</li><li>可以使用覆盖索引，避免回表操作</li><li>表记录较少（如配置表）或者字段区分度较低（如性别）时不应建立索引</li><li>字段值较长时不建议建立索引（可以考虑建立前缀索引）</li><li>查询中的排序字段应该创建索引</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般情况下，数据库做了两件事情：存储数据和检索数据。检索数据是数据库中使用最多的一个功能。本篇文主要讨论MySQL数据库中InnoDB存储引擎下的索引的原理和使用。本文主要从以下几个方面展开：&lt;/p&gt;
&lt;img src=&quot;/2020/10/09/MySQL%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2.png&quot; class=&quot;&quot; title=&quot;文章大纲&quot;&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何升级MySQL</title>
    <link href="http://blog.codingcat.net/2020/09/24/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7MySQL/"/>
    <id>http://blog.codingcat.net/2020/09/24/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7MySQL/</id>
    <published>2020-09-24T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.757Z</updated>
    
    <content type="html"><![CDATA[<p>数据库运行过程中，新版本不断的开发出来，低版本不断被淘汰，在已经运行的业务系统数据库中，我们是否应该升级数据库，升级需要考虑些什么问题呢？</p><span id="more"></span><!--toc--><h2 id="数据库是否应该升级"><a href="#数据库是否应该升级" class="headerlink" title="数据库是否应该升级"></a>数据库是否应该升级</h2><p>在准备对数据库升级之前，需要考虑一下几个问题，升级对业务有什么好处？有什么影响？然后再决定是否升级。在考虑是否升级前，需要对整体评估升级版本后能够解决什么样的问题。同时会带来什么样的问题，避免为了升级而升级。</p><h3 id="MySQL数据库升级会带来什么好处？"><a href="#MySQL数据库升级会带来什么好处？" class="headerlink" title="MySQL数据库升级会带来什么好处？"></a>MySQL数据库升级会带来什么好处？</h3><p><strong>是否能解决业务上的痛点</strong></p><p>业务上，升级可能会带来性能上的提升，当然也可能下降，5.6中有个叫performance_schema的库，默认是不开启的，开启此库会增加数据库系统的负担降低数据库性能，不过在5.7中经过优化，对性能的影响几乎可以忽略了。再如8.0中，提升了安全性，同时也支持在很多关系数据库中已经支持的窗口函数，对于数据统计分析的功能支持更好了。</p><p><strong>是否能解决运维上的痛点</strong></p><p>在运维上，更新的版本多少会带来些新的功能，减轻运维压力，比如MySQL5.7中增加了sys库，相比于5.7之前的版本中，通过sys库可以更好的监控数据库相关的指标。</p><h3 id="升级会有什么影响"><a href="#升级会有什么影响" class="headerlink" title="升级会有什么影响"></a>升级会有什么影响</h3><p><strong>对原来业务的支持是否影响</strong></p><p>不同版本之间的jdbc不一样，如8.0版本和5.7版本，当升级到8.0之后，相应的应用程序也应该一并升级处理，修改连接数据库的驱动。另外，不同版本之间参数可能不一致，如sql_mode，在不同的版本中默认值不一样，对SQL的处理方式不一样，导致SQL执行结果报错或者不符合预想的情况，另外有些参数在高版本中已经失效禁用了，在升级到新版本后，将无法启动数据库。</p><p><strong>对原来业务性能是否有影响</strong></p><p>上面提到过performance_schema库会对性能有影响，另外，当升级后需要注意InnoDB优化器对SQL语句的处理，不同版本优化方法不一样，可能会不能使用索引导致性能下降。</p><h2 id="如何升级MySQL"><a href="#如何升级MySQL" class="headerlink" title="如何升级MySQL"></a>如何升级MySQL</h2><h3 id="制定一个可行的升级方案"><a href="#制定一个可行的升级方案" class="headerlink" title="制定一个可行的升级方案"></a>制定一个可行的升级方案</h3><p>当评估了升级会带来的好处和影响后，确定要升级的话需要制定一个可行的升级方案了。</p><p><strong>评估受影响的业务系统</strong></p><p>一般情况下，一个数据库可能会有不同的业务系统使用，在升级前需要确定收到影响的系统，并在升级前通知到位，确保在升级的过程中如果有任何问题都可以找到相关的人来解决或者验证。</p><p><strong>升级的详细步骤</strong></p><p>对于线上系统的升级，是个紧张且重要的事情，不能出任何差错，因此一个详细的操作步骤是必不可少的。在实际的操作方案中，需要详细到可以直接从方案中复制来使用。大致的步骤如下：</p><ol><li><p>对待升级数据库进行备份</p></li><li><p>升级Slave服务器版本</p></li><li><p>手动进行主从切换</p></li><li><p>升级Master服务器版本</p></li><li><p>升级完成后进行业务检查</p></li><li><p>升级后的数据库检查（配置文件、数据库对象、操作系统）</p></li><li><p>升级后的业务检查</p></li></ol><p><strong>升级失败回滚方案</strong></p><p>俗话说，天有不测风云，虽然不一定能够遇到，但是要准备好在遇到的时候能够处变不惊。一个失败回滚的方案是必不可少的，大致步骤如下：</p><ol><li><p>升级失败回滚的步骤，详细的回滚失败处理步骤</p></li><li><p>回滚后数据库环境检查</p></li><li><p>回滚后的业务检查</p></li></ol><h3 id="实施升级方案"><a href="#实施升级方案" class="headerlink" title="实施升级方案"></a>实施升级方案</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于线上系统的升级，是个高危影响大的操作，在制定方案的时候需要详细到每一个操作步骤都写清楚，要考虑到所有的情况。更重要的一点，需要在实际线上操作之前按照事先写好的方案文档实际操作并修改不当的地方。对于主从复制的升级，需要注意一点是高版本的MySQL数据库能够作为低版本的从库来使用，反之则会出问题，因此需要先升级从库。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据库运行过程中，新版本不断的开发出来，低版本不断被淘汰，在已经运行的业务系统数据库中，我们是否应该升级数据库，升级需要考虑些什么问题呢？&lt;/p&gt;</summary>
    
    
    
    <category term="数据库 - MySQL" scheme="http://blog.codingcat.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化之key_buffer_size</title>
    <link href="http://blog.codingcat.net/2020/09/23/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bkey_buffer_size/"/>
    <id>http://blog.codingcat.net/2020/09/23/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bkey_buffer_size/</id>
    <published>2020-09-23T00:00:00.000Z</published>
    <updated>2021-06-08T12:39:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>MyISAM表中的索引块在所有线程之间缓存和共享，key_buffer_size用来设置索引块使用的缓冲大小，key buffer也称key cache，key buffer用来缓存MyISAM表经常使用的索引。</p><span id="more"></span><p>在32位平台上key_buffer_size最大可设置为4294967295B，即4G，64位平台更大。根据操作系统和硬件平台实际可用的RAM，实际生效的值比设置的值偏小。该值的大小即为MySQL申请的内存大小，内部会为该变量尽可能分配内存以达到该值，实际上分配的可能会偏小。</p><p>该参数大小决定索引处理的速度，尤其是索引读的速度，在只使用MyISAM存储引擎的数据库中，可以将该值设置为机器总内存的25%，不宜设置过大（大于及其总内存的50% ），这样的话系统会频繁切换内存块（MySQL依赖操作系统缓存来缓存数据，因此需要留点空间给操作系统），导致系统变慢，如果有使用其他的存储引擎，也需要将其他存储引擎的内存使用考虑进去。</p><p>key_buffer_size是个全局参数，只对MyISAM表有作用，因为MySQL中磁盘临时表使用的是MyISAM引擎，因此也需要使用到该值，对于1G内存的机器，如果不使用MyISAM表，推荐值是16M（8-64M）。</p><p>可以通过show status，检查Key_read_requests, Key_reads, Key_write_requests, 以及Key_writes 状态变量的值来检查key buffer的性能，正常情况下，Key_reads/Key_read_requests的值应该小于0.01。Key_reads是从磁盘读取索引块到key cache的次数，Key_read_requests是请求读取索引块的次数，Key_reads较大，即Key_reads/Key_read_requests大于0.01时，可以增加key_buffer_size的值使其小于0.01来提升查询性能。更新多的时候Key_writes/Key_write_requests的值接近1，如果更新影响很多行或者使用DELAY_KEY_WRITE表选项时，Key_writes/Key_write_requests的值会更小。</p><p>通过公式1 - ((Key_blocks_unused * key_cache_block_size) / key_buffer_size)可以计算出索引块使用率，其中Key_blocks_unused 表示未使用的索引块数key_cache_block_size表示索引块大小。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyISAM表中的索引块在所有线程之间缓存和共享，key_buffer_size用来设置索引块使用的缓冲大小，key buffer也称key cache，key buffer用来缓存MyISAM表经常使用的索引。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://blog.codingcat.net/tags/MySQL/"/>
    
  </entry>
  
</feed>
